package ir.ac.specialReport.dao;



import ir.ac.core.dao.AbstractDAO;
import ir.ac.specialReport.entity.AcSpecialColumn;
import ir.ac.specialReport.entity.AcSpecialGroupBy;
import ir.ac.specialReport.entity.AcSpecialReport;
import ir.ac.specialReport.entity.AcSpecialReport_;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.criteria.*;
import java.util.*;

@RequestScoped
public class AccountingSpecialDao extends AbstractDAO<AcSpecialReport> {

    @Inject
    protected EntityManager entityManager;

    @Override
    protected EntityManager entityManager() {
        return entityManager;
    }

    public Long findNextCode() {
        CriteriaBuilder criteriaBuilder = entityManager().getCriteriaBuilder();
        CriteriaQuery<Long> criteriaQuery = criteriaBuilder.createQuery(Long.class);
        Root<AcSpecialReport> root = criteriaQuery.from(AcSpecialReport.class);
        criteriaQuery.select(criteriaBuilder.max(root.get(AcSpecialReport_.code)));

        Query query = entityManager().createQuery(criteriaQuery);
        query.setMaxResults(1);
        try {
            Object result = query.getSingleResult();
            return result != null ? ((Long) result) + 1 : 1L;
        } catch (NoResultException e) {
            return 1L;
        }
    }

    public long countReportByName(AcSpecialReport specialReport){
        try {
            Query query = entityManager().createNamedQuery("countReportByName");
            query.setParameter("name",specialReport.getName());
            query.setParameter("createdBy",specialReport.getCreatedBy());
            return (long)query.getSingleResult();
        }catch (NullPointerException e){
            return 0l;
        }catch (NoResultException e){
            return 0l;
        }
    }

    public long countReportByNameForEdit(AcSpecialReport specialReport){
        try {
            Query query = entityManager().createNamedQuery("countReportByNameForEdit");
            query.setParameter("id",specialReport.getId());
            query.setParameter("name",specialReport.getName());
            query.setParameter("createdBy",specialReport.getCreatedBy());
            return (long)query.getSingleResult();
        }catch (NullPointerException e){
            return 0l;
        }catch (NoResultException e){
            return 0l;
        }
    }

    /*findSpecial Report By ID*/
    public AcSpecialReport findByID(Long id) {
        try {
            Query query = entityManager().createNamedQuery("findSpecialReportById");
            query.setParameter("id", id);
            return (AcSpecialReport) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        }
    }


    private int rp = 1;

    public List<AcSpecialColumn> findAcColumnBySpecialReport(AcSpecialReport specialReport){
        try {
            Query query = entityManager().createNamedQuery("findAcColumnBySpecialReport");
            query.setParameter("specialReport",specialReport);
            return query.getResultList();
        }catch (NullPointerException e){
            e.printStackTrace();
            return new ArrayList<>(0);
        }catch (NoResultException e){
            return new ArrayList<>(0);
        }
    }
    public List<AcSpecialGroupBy> findAcRowBySpecialReport (AcSpecialReport specialReport){
        try {
            Query query = entityManager().createNamedQuery("findAcRowBySpecialReport");
            query.setParameter("specialReport",specialReport);
            return query.getResultList();
        }catch (NullPointerException e){
            return new ArrayList<>(0);
        }catch (NoResultException e){
            return new ArrayList<>(0);
        }
    }

    public void createFSTable(String tableName, Map<String,String> columns){
        String command = "CREATE  TABLE " + tableName + " ( ID NUMBER(19,0) GENERATED BY DEFAULT AS IDENTITY";

        for (Map.Entry<String, String> entry : columns.entrySet()) {
            command = command + ", " + entry.getKey() + " " + entry.getValue();

        }
        command = command + " )";
       entityManager.createNativeQuery("DROP TABLE " + tableName + " PURGE").executeUpdate();
        Query q = entityManager.createNativeQuery(command);
        q.executeUpdate();

    }

    public void insertFSData(String tableName,Map<String,Object> value) {

            String command = "INSERT INTO " + tableName + "(";

            for (Iterator<Map.Entry<String, Object>> iterator = value.entrySet().iterator(); iterator.hasNext(); ) {

                Map.Entry<String, Object> entry = iterator.next();
                command = command + entry.getKey();
                if (iterator.hasNext()) {
                    command = command + ", ";
                }
            }
            command = command + ")";
            command = command + " VALUES (";


            for (Iterator<Map.Entry<String, Object>> iterator = value.entrySet().iterator(); iterator.hasNext(); ) {

                Map.Entry<String, Object> entry = iterator.next();
                if(entry.getValue() instanceof String){
                    command = command + "'" + entry.getValue() + "'";
                }
                else{
                    command = command + entry.getValue();
                }
                if (iterator.hasNext()) {
                    command = command + ", ";
                }
            }


            command = command + ")";

            entityManager.createNativeQuery(command).executeUpdate();
            //ResultSet rs = stmt.executeQuery(SQLQueryHandler.findAll(tableName));
            //rs.next();
    }

}
